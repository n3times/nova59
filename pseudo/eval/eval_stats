// r1: sum of y
// r2: sum of y*y
// r3: number of data points
// r4: sum of x
// r5: sum of x*x
// r6: sum of x*y

void eval_sigma(opn, s)
  X      = s.rT
  Y      = s.rX
  SY     = s.r[1]
  SYY    = s.r[2]
  CNT    = s.r[3]
  SX     = s.r[4]
  SXX    = s.r[5]
  SXY    = s.r[6]
  op = opn.inv ? n_minus : n_plus
  s.r[1] = op(SY,  Y,             &e1)
  s.r[2] = op(SYY, n_square(Y),   &e2)
  s.r[3] = op(CNT, N_ONE,         &e3)
  s.r[4] = op(SX,  X,             &e4)
  s.r[5] = op(SXX, n_square(X),   &e5)
  s.r[6] = op(SXY, n_times(X, Y), &e6)
  s.rX   = op(CNT, N_ONE,         &eX)
  s.rT   = op(X,   N_ONE,         &eT)  // side effect of actual implementation.
  s.err |= e1 | e2 | e3 | e4 | e5 | e6 | eX | eT

void eval_avg(opn, s)
  SY  = s.r[1]
  SYY = s.r[2]
  CNT = s.r[3]
  SX  = s.r[4]
  SXX = s.r[5]
  opn.inv:
    devX = n_root(n_div(n_minus(SXX,
                                n_div(n_square(SX, e1), CNT, e2), e3),
                        n_minus(CNT, N_ONE),e4), e5)
    s.err |= e1 | e2 | e3 | e4 | e5
    devY = n_root(n_div(n_minus(SYY,
                                n_div(n_square(SY, e1), CNT, e2), e3),
                        n_minus(CNT, N_ONE),e4), e5)
    s.err |= e1 | e2 | e3 | e4 | e5
    s.rT = devX
    s.rX = devT
  else:
    avgX = n_div(SX, CNT, eX)
    avgY = n_div(SY, CNT, eY)
    s.err |= eX | eY
    s.rT = avgX
    s.rX = avgT
