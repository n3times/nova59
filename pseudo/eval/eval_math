==  Utility Methods  ==

double convert(angle, from, to)
  from == to:   return angle
  from == DEG:  angle = angle / 180 * pi
  from == GRAD: angle = angle / 200 * pi
  to == DEG:    angle = angle / pi * 180
  to == GRAD:   angle = angle / pi * 200
  return angle


==  Implementation  ==

void eval_pi(opn, s)
  s.rX = pi

void eval_deg(opn, s)
  s.trigMode = DEG
void eval_rad(opn, s)
  s.trigMode = RAD
void eval_grad(opn, s)
  s.trigMode = GRAD

void eval_fun(N(*fun)(N, e), s)
  s.rX = fun(s.rX, e)
  s.err |= e

void eval_root(opn,   s) =  eval_fun(n_root,                    s)
void eval_ln(opn,     s) =  eval_fun(opn.inv ? n_exp : n_ln,    s)
void eval_log(opn,    s) =  eval_fun(opn.inv ? n_pow10 : n_log, s)
void eval_square(opn, s) =  eval_fun(n_square,                  s)
void eval_1_x(opn,    s) =  eval_fun(n_1_x,                     s)
void eval_absopn(opn, s) =  eval_fun(n_abs,                     s)
void eval_int(opn,    s) =  eval_fun(opn.inv ? n_frac : n_int,  s)


void eval_trig_fun(N(*fun)(N), s)
  res = d2n(convert(n2d(s.rX), s.trigMode, RAD), e)
  s.err |= e
  s.rX = fun(res, e)
  s.err |= e

void eval_arc_trig_fun(N(*fun)(N))
  s.rX = fun(s.rX, e)
  s.err |= e
  s.rX = d2n(convert(n2d(res), s.trigMode, RAD), e)
  s.err |= e

void eval_sin(opn)
  opn.inv ? eval_arc_trig_fun(n_arc_sin) : eval_trig_fun(n_sin)
void eval_cos(opn)
  opn.inv ? eval_arc_trig_fun(n_arc_cos) : eval_trig_fun(n_cos)
void eval_tan(opn)
  opn.inv ? eval_arc_trig_fun(n_arc_tan) : eval_trig_fun(n_tan)


N n_dms(X, e)
  x = n2d(X)
  neg = x < 0
  neg: x = -x
  h = [x];
  m = [frac(x) * 100]
  s = frac(x * 100) * 100
  res = h + m/60 + s/(60 * 60)
  return d2n(neg ? -res : res, e)

N n_idms(X, e)
  x = n2d(X)
  neg = x < 0
  neg: x = -x
  h = [x];
  m = [frac(x) * 60]
  s = frac(frac(x) * 60) * 60
  res = h + m/100 + s/(100 * 100)
  return d2n(neg ? -res : res, e)

void eval_dms(opn)
  opn_inv:
    s.rX = n_idms(X, e)
  else:
    s.rX = n_dms(X, e)
  s.err |= e

void eval_p_r(s)
  r = n2d(s.rT)
  theta = n2d(s.rX)
  theta = convert(theta, s.trigMode, RAD)
  x = r * sin(theta)
  y = r * cos(theta)
  s.rX = d2n(x, e)
  s.err |= e
  s.rT = d2n(y, e)
  s.err |= e

void eval_r_p(s)
  x = n2d(s.rT)
  y = n2d(s.rX)
  x == 0:
    y == 0: theta =  pi/4
    y > 0:  theta =  pi/2
    y < 0:  theta = -pi/2
  else:
    theta = arctan(y/x)  // -pi/2 .. pi/2
    x < 0: theta += pi
  // theta in -pi/2 .. 3pi/2
  r = root(x*x + y*y)
  theta = convert(theta, RAD, s.trigMode)
  s.rX = d2n(theta, e)
  s.err |= e
  s.rT = d2n(r, e)
  s.err |= e

void eval_p_r(opn, s) =  opn.inv ? eval_r_p(s) : eval_p_r(s)
