== API ==

// Given a stream of keys and program steps, the parser generates a stream of
// structured operations.
Parser
  ParserState state
  Operation operations[]  // An ever growing array. Last/current is PENDING and
                          // may be empty. Others are COMPLETE or CANCELED.
  bool sec                // 2nd key is selected.
  Mode mode

  // Updates the parser state after a key from the keyboard has been pressed.
  // Params: mode is EVAL or LRN, row in 1..9, col in 1..5.
  Action handle_key_pressed(Mode mode, int row, int col)

  // Updates the parser state after 'val' has been handled.
  // In EVAL and LRN, 'val' is a key.
  // In RUN and SST, 'val' is a step.
  // Param: val in 0..99.
  Action handle(Mode mode, int val)

Mode - enum  { LRN, EVAL, RUN, SST }  // Other modes not involved.

ActionType - enum
  KEY_MOD_SEC    // 2nd key has been selected
  KEY_MOD_NOSEC  // 2nd key has been deselected
  KEY_OPR_INV    // Operator modifier inv has been selected
  KEY_OPR_NOINV  // Operator modifier inv has been deselected
  KEY_OPR_KEY    // Operator key has been set
  KEY_OPD_IND    // Operand ind modifier has been selected
  KEY_OPD_NOIND  // Operand ind modifier has been deselected
  KEY_OPD_D      // Digit as part of a D operand
  KEY_OPD_DD     // Digit as part of a DD or Ind operand
  KEY_OPD_DDD    // Digit as part of a DDD operand
  DBL_OPD_DD     // 2 digits as part of a DD or Ind operand
  DBL_OPD_DDD    // 2 digits as part of a DDD operand
  KEY_OPD_LBL    // A label used as operand
  KEY_SKIP       // Key does not affect operation
  KEY_LBL_BEG    // Beginning of label marker ("Lbl" in "Lbl STO")
  KEY_LBL_END    // End of label marker ("STO" in "Lbl STO")
  KEY_EVL_SST    // SST key in EVAL mode
  KEY_PGM_SBR    // SBR in Pgm xx SBR xxx

Action
  ActionType type  //
  int val          // A key, or a combination of 2 digit keys.

ParserState - enum
  OPR_UNK       // Operation so far is "_" or "INV _".
  LBL_BEG       // Waiting for the end of a label marker: "STO" in "Lbl STO".
                // Can happen between "inv" and operator.

  OPD_UNK       // Operand unknown "".
                // Kind may be determined from inv, opr and mode values.
  OPD_MOD_IND   // Operand is "*_"
  OPD_DD_1      // Operand is "d_" or "*d_".
  OPD_DDD_1     // Operand is "d__".
  OPD_DDD_12    // Operand is "dd_".
  ADDRESS       // It is an address, possibly in "Pgm xx SBR address" but
                // nothing else in known.


== Helper functions ==

cancel_opn()
  opn = operations.last
  opr = opn.operator
  is_blank_opn = !opr.inv && opr.key == K_UNK
  is_blank_opn: return  // Reuse.
  opn.state = CANCELED

  add new operation  // Previous operation remains incomplete
    parser.state = OPR_UNK
    operator = (false, -1)
    operands = []

done_opr()
  done_opx()

done_opd()
  case opd.type:
    UNK: assert false
    // Complete operand if necessary.
    IND: DD: val = %02d.val
    DDD: val = %03.d
  done_opx()

done_opx()
  assert opr.key != UNK
  if current_operation has additional operands
    add new operand (UNK, "")
    parser.state = OPD_UNK
  else
    current_operation.state = COMPLETE
    parser.state = OPR_UNK
    add empty operation
      opn.state = PENDING
      operator = [ false, -1 ]
      operands = []

// Some Key defines.
2ND = 21
INV = 22
IN' = 27
Ind = 40
SST = 41
SBR = 71
Lbl = 76

bool is_dig(val)  =  val in 0..9

== Implementation ==

int get_key_value(bool sec, int row, int col)
  sec:  val = 10 * row + (col + 5) % 10
  else: val = 10 * row + col
  val == 62: val = 7
  val == 63: val = 8
  val == 64: val = 9
  val == 72: val = 4
  val == 73: val = 5
  val == 74: val = 6
  val == 82: val = 1
  val == 83: val = 2
  val == 84: val = 3
  val == 92: val = 0
  return val

Action handle_key_pressed(Mode mode, int row, int col)
  assert mode == MODE_EVAL || mode == MODE_LRN
  assert row in 1..9 && col in 1..5

  // Handle 2nd modifier.
  is(key(row, col), 2nd):
    ~parse.sec
    return parser.sec ? KEY_MOD_SEC : KEY_MOD_NOSEC
  val = get_key_value(parser.sec, row, col)
  parser.sec = false
  parser.state == OPR_UNK && val == IN':  // 2nd INV = INV 2nd.
    val = INV
    parser.sec = true

  return handle(mode, val)

Action handle(Mode mode, int val)
  assert val in 0..99

  // Some definitions
  opn = operations.last
  opr = opn.operator
  opd = opn.operands.last
  mode_step = mode == MODE_RUN || mode == MODE_SST
  mode_key = mode == MODE_EVAL || mode == MODE_LRN

  // When switching modes, the current operation may be dangling:
  //   LRN or RUN -> EVAL: by going beyond the last program step
  //   EVAL <-> SST: by switching between SST and eval key mid operation
  self.mode != mode:
    !is_opn_empty(opn)
      self.mode == MODE_LRN && mode == MODE_EVAL: cancel_opn()
      else self.mode == MODE_RUN && mode == MODE_EVAL: cancel_opn()
      else self.mode == MODE_EVAL && mode == MODE_SST: break
      else self.mode == MODE_SST && mode == MODE_EVAL: break
      else: assert false
    self.mode = mode

  // Eval handler should then call the parser with the current program step.
  is(val, SST) && mode == MODE_EVAL:                              KEY_EVL_SST

  case parser.state:
    // Condition                  opr inv|key        new state    ret_value
    OPR_UNK:
      is(val, INV) || is(val, IN'):
        opr.inv:                  ~opr.inv|.         OPR_UNK      KEY_OPR_NOINV
        else:                     ~opr.inv|.         OPR_UNK      KEY_OPR_INV
      is_opr(val):                .|val              done_opr()   KEY_OPR_KEY
      is(val, Lbl) && mode != EVAL:                  LBL_BEG      KEY_LBL_BEG
      else:  /* Skip 2nd, 2nd', Nop, Ind, maybe Lbl, SST */       KEY_SKIP
    LBL_BEG:                                         OPR_UNK      KEY_LBL_END

    // Condition                  opd type|value     state        ret_value
    OPD_UNK:
      case operand_kind(.):
        OPD_KIND_ADDRESS:         .|.                ADDRESS      handle(.)
        OPD_KIND_DD:
          is(val, Ind):           IND|.              OPD_MOD_IND  KEY_OPD_IND
          // fall through:
        OPD_KIND_DD_ONLY:
          mode_step:              DD|%02d.val        done_opd()   DBL_OPD_DD
          is_dig(val):            DD|val             OPD_DD_1     KEY_OPD_DD
          else:                                      cancel_opn() handle(.)
        OPD_KIND_D:
          is(val, Ind):           IND|.              OPD_MOD_IND  KEY_OPD_IND
          mode_step:              D|val%10           done_opd()   KEY_OPD_D
          is_dig(val):            D|val              done_opd()   KEY_OPD_D
          else:                                      cancel_opn() handle(.)
        OPD_KIND_SBR:
          is_usr(val):            USR|val            done_opd()   KEY_OPD_LBL
          is(val, SBR):           .|.                ADDRESS      KEY_PGM_SBR
          is(val, 2nd) || is(val, SST):                           KEY_SKIP
          else:                                      cancel_opn() handle(.)
    OPD_MOD_IND:
      mode_step:                  .|val              done_opd()   DBL_OPD_DD
      is(val, Ind):               UNK|.              OPD_UNK      KEY_OPD_NOIND
      is_dig(val):                .|val              OPD_DD_1     KEY_OPD_DD
      else:                                          cancel_opn() handle(.)
    ADDRESS:
      is(val, Ind):               IND|.              OPD_MOD_IND  KEY_OPD_IND
      is_dig(val):                DDD|val            OPD_DDD_1    KEY_OPD_DDD
      is_lbl(val):                LBL|val            done_opd()   KEY_OPD_LBL
      is_opr(val):                                   cancel_opn() handle(.)
      else:  /* 2nd, 2n', maybe SST */                            KEY_SKIP
    OPD_DDD_1:
      mode_step:                  .|value.%02d.val   done_opd()   DBL_OPD_DDD
      is_dig(val):                .|value.val        OPD_DDD_12   KEY_OPD_DDD
      else:                                          done_opd()   handle(.)
    OPD_DDD_12:
      is_dig(val):                .|value.val        done_opd()   KEY_OPD_DDD
      else:                                          done_opd()   handle(.)
    OPD_DD_1:
      is_dig(val):                .|value.val        done_opd()   KEY_OPD_DD
      else:                                          done_opd()   handle(.)
