== BASIC PROGRAM LISTING ==

// Print program as it would be printed by the TI-59 printer.
void basic_program_listing(int steps[])
  parser = new_parser()
  for i = 0; i < steps.len; i++:
    step = steps[i]
    action = parser.handle(RUN, step)
    action.type in { DBL_OPD_DD, DBL_OPD_DDD, KEY_OPD_D, KEY_OPD_DDD }:
      print "%03d  %02d\n", i, step
    else:
      print "%03d  %s\n", i, key_data[step].as_string


== COMPLEX PROGRAM LISTING ==

void nl(i, step)      =  print "\n%03d %s\n", i, key_data[step].as_string
void sp(i, step)      =  print " %s\n", key_data[step].as_string
void sp_dbl(i, step)  =  print " %02d\n", step
void dbl(step)        =  print "%02d\n", step
void prt(step)        =  print "%d", step

bool is_numeric(step):
  return step in { 0, 1, ..., 9, . }

// Print operations, labels and numbers in their own lines.
void complex_program_listing(int steps[])
  parser = new_parser()
  int number_line_len = 0
  Action previousAction = ACTION_UNK

  for i = 0; i < steps.len; i++:
    step = steps[i]
    new_number_line_len = 0
    action = parser.handle(_RUN, step)
    action.type:
      KEY_MOD_SEC: KEY_MOD_NOSEC: KEY_OPD_NOIND: KEY_OPD_DD: KEY_EVL_SST:
        assert(false)

      // Operator.
      KEY_OPR_INV: KEY_OPR_NOINV: nl(i, step)
      KEY_OPR_KEY:
        previousAction.type == KEY_OPR_INV: sp(step)
        else:
          is_numeric(step):
            number_line_len == 0: number_line_len == 10:
              new_number_line_len == 1
              nl(i, step)
            else:
              new_number_line_len += 1
              prt(step)
          else:
            nl(i, step)

      // Operand.
      KEY_OPD_IND: KEY_OPD_D: KEY_OPD_DDD: KEY_OPD_LBL: sp(step)
      DBL_OPD_DD: sp_dbl(step)
      DBL_OPD_DDD: dbl(step)

      // Miscellaneous.
      KEY_SKIP: KEY_LBL_BEG: nl(i, step)
      KEY_LBL_END: KEY_PGM_SBR: sp(step)
    number_line_len = new_number_line_len
    previousAction = action
