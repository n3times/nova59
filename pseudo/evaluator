==  Evaluator in EVAL | SST | RUN Modes  ==

bool is_numeric_opn(opn)       =  opn.opr.key in { 0, ..., 9, ., +/-, EE }
bool is_program_edit_opn(opn)  =  opn.opr.key in { LRN, SST, BST, Ins, Del }

==  API  ==

Evaluator
  Operation operations[]
  int last_resolved_opn_index = -1  // Complete or canceled.
  Log log

  Evaluator new_evaluator(Parser parser)
    operations = parser.operations

  void eval(operations, last_resolved_opn_index, state)

==  Implementation  ==

// Evaluates non resolved operations.
void eval(operations, last_resolved_opn_index, state)
  for opn_index = last_resolved_opn_index + 1;
      opn_index <= operations.len - 1;
      opn_index++:
    opn = operations[opn_index]
    key = opn.operator.key

    may_log_input = is_log_mode(state.mode)

    // Eval display.
    do_eval_display = state.is_display_edit &&
                      key != KEY_UNK &&
                      key_data[key].does_eval_display()
    do_eval_display:
      may_log_input: log.input(state.display)
      state.display.eval()

    // Eval operation.
    do_eval_opn = opn.state == COMPLETE
    do_eval_opn:
      key_data[key].eval(opn, state)

      // Log operation.
      may_log_output = is_log_mode(state.mode)
      is_number_edit_opn = is_numeric_opn(opn) && state.is_display_edit
      is_loggable_opn = !is_number_edit_opn && !is_program_edit_opn(opn)
      is_loggable_opn:
        may_log_input && state.is_display_edit: log.input(state.display)
        may_log_input: log.input(opn)
        may_log_output: log.output(state.display)

    opn.state != PENDING:
      last_resolved_opn_index = opn_index

  is_log_mode(state.mode): log.pending(get_pending_operation())
  update_current_operation()

String get_pending_operation()
  state.is_display_edit: return state.display
  opns = operations
  int last_opn_index = opns.operations.len - 1
  return operation_as_string(opn[last_opn_index])
