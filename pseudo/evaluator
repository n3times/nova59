==  Evaluator in EVAL/SST/RUN Modes  ==

is_loggable_opn(opn):
  key = opn.opr.key
  is_program_edit_opn = key in { LRN, SST, BST, INS, DEL }
  is_program_edit_opn: return false
  is_numeric_opn = key in { 0, ..., 9, ., +/-, EE }
  is_numeric_opn: return false
  return true

Evaluator
  Parser parser
  Log log
  int last_resolved_opn_index = -1  // Complete or canceled.

void eval()
  opns = parser.operations
  for opn_index = last_resolved_opn_index + 1;
      opn_index <= opns.len - 1;
      opn_index++:
    opn = opns[opn_index]
    key = opn.operator.key

    log_input = is_log_mode(mode)

    // Display may need to be evaled even if operation is not complete yet.
    do_eval_display = state.is_display_edit &&
                      key != KEY_UNK &&
                      key_data[key].does_eval_display
    do_eval_display:
      log_input: log.input(state.display)
      state.display.eval()

    // Eval operation.
    opn.state == COMPLETE:
      opn.eval()
      log_output = is_log_mode(mode)
      is_loggable_opn(opn):
        log_input && state.is_display_edit: log.input(state.display)
        log_input: log.input(opn)
        log_output: log.output(state.display)

    opn.state != PENDING:
      last_resolved_opn_index = opn_index

  update_current_operation()
