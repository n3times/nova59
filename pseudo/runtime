Runtime
  runtime_state_t state        // Initially EVAL.IDLE.
  bool trace_on                // In RUN mode with K_GTO pressed.
  bool is_key_pressed          // Used in ADV and tracing.
  display_mode_t display_mode

runtime_state_t
- name
- display_mode                 // BLANK REG or STEP, possibly prefixed by [.
- wait_t wait                  // Wait so many ms before calling next().
- state_t (*next)()            // Should be called whenever wait >= 0.
- state_t (*press)(i, j)       // User pressed a given key.
- state_t (*release)()         // User releases previously pressed key.

Modes:
- EVAL LRN RUN
- LIST_*: * in { STEPS, REGS, LBLS }
- PROGRAM_SAVE PROGRAM_LOAD
- ADV

State names are 'mode.suffix'.
State transitions are detemined by next/press/release.

name           | display  wait   next             press           release
===============+===============================================================
EVAL.IDLE      | REG      IDLE   NA()             eval_press(.)   eval_release()
EVAL.FEEDBACK  | [REG     100    eval_next()      eval_press(.)   SAME_STATE()
EVAL.BLINK_OFF | BLANK    400    EVAL.BLINK_ON    eval_press(.)   NA()
EVAL.BLINK_ON  | REG      400    EVAL.BLINK_OFF   eval_press(.)   NA()
---------------+---------------------------------------------------------------
LRN.IDLE       | STEP     IDLE   NA()             lrn_press(.)    SAME_STATE()
LRN.FEEDBACK   | [STEP    100    LRN.IDLE         lrn_press(.)    SAME_STATE()
---------------+---------------------------------------------------------------
RUN.READY      | [        100    RUN.LOOP         run_press(.)    SAME_STATE()
RUN.LOOP       | [        0      run_next()       run_press(.)    SAME_STATE()
RUN.PRINTED    | [        100*   RUN.LOOP         run_press(.)    SAME_STATE()
RUN.PAUSED     | REG      600    RUN.READY        run_press(.)    SAME_STATE()
RUN.TRACED     | REG      200    RUN.READY        run_press(.)    SAME_STATE()
---------------+---------------------------------------------------------------
PROGRAM_LOAD   | [        IDLE   NA()             pgm_press(.)    SAME_STATE()
PROGRAM_SAVE   | [        IDLE   NA()             pgm_press(.)    SAME_STATE()
---------------+---------------------------------------------------------------
ADV.LOOP       | [        200    adv_next()       NA()            adv_release()
---------------+---------------------------------------------------------------
LIST_*.READY   | [        100    LIST_*.LOOP      list_press(.)   SAME_STATE()
LIST_*.LOOP    | [        0      list_next()      list_press(.)   SAME_STATE()

Mode handlers:
  info_t eval.press(i, j)
  info_t lrn.press(i, j)
  info_t run.next()
  info_t adv.next()
  info_t list_*.next()
  info_t program_load.load(steps_in)
  info_t program_save.save(steps_out)

Flags
  auto_release_flag
  feedback_flag
  no_blink_flag


==  API  ==

wait_t press_key(i, j)
wait_t release_key()
wait_t next()
wait_t load_program(int steps_in[])
wait_t save_program(int steps_out[])
wait_t cancel()


==  API IMPLEMENTATION  ==

wait_t press_key(i, j)
  assert 1 <= i <= 9 && 1 <= j <= 5
  is_key_pressed: release_key()
  is_key_pressed = true
  new_state = state_data[state].press(i, j)
  new_state == SAME_STATE:
    auto_release_flag: return release_key()
    return SAME_WAIT
  state = new_state
  auto_release_flag: return release_key()
  set_display(state_data[state].display_mode)
  return state_data[state].wait
  
wait_t release_key()
  !is_key_pressed: return SAME_WAIT
  is_key_pressed = false
  trace_on: trace_on = false
  new_state = state_data[state].release()
  new_state == SAME_STATE: return SAME_WAIT
  state = new_state
  set_display(state_data[state].display_mode)
  return state_data[state].wait
  
wait_t next()
  new_state = state_data[state].next()
  new_state == SAME_STATE: return SAME_WAIT
  state = new_state
  set_display(state_data[state].display_mode)
  return state_data[state].wait

wait_t load_program(int steps_in[])
  program_load.load(steps_in)
  mode = EVAL
  return initial(EVAL)

wait_t save_program(int steps_out[])
  program_save.save(steps_out)
  mode = EVAL
  return initial(EVAL)

wait_t load_module(int steps_in[][])
  module_load.load(steps_in)
  return SAME_WAIT

wait_t cancel()
  mode = EVAL
  return initial(EVAL)


==  EVAL  ==

state_t eval_next()
  return initial(EVAL)

state_t eval_press(i, j)
  eval.press(i, j)
  mode == EVAL:
    feedback_flag:  return EVAL.FEEDBACK
    else:           return EVAL.IDLE
  else:
    return initial(mode)

state_t eval_release()
  return initial(EVAL)


==  LRN  ==

state_t lrn_press(i, j)
  lrn.press(i, j)
  mode == LRN:
    feedback_flag:  return LRN.FEEDBACK
    else:           return LRN.IDLE
  else:
    return initial(mode)


==  RUN  ==

state_t run_next()
  info = run.next()
  mode == RUN:
    info.is_paused:    return RUN.PAUSED
    trace_on:     return RUN.TRACED
    info.has_printed:  return RUN.PRINTED
    return RUN_LOOP
  else:
    return initial(mode)

state_t run_press(i, j)
  key(i, j) == K_RS:
    mode = EVAL
    return EVAL.IDLE
  key(i, j) == K_GTO:
    trace_on = true
  return SAME_STATE


==  ADV  ==

state_t adv_next()
  adv.next()
  return ADV.LOOP

state_t adv_release()
  mode = EVAL
  return initial(EVAL)


==  PROGRAM  ==

state_t pgm_press(i, j)
  key(i, j) == K_RS:
    mode = EVAL
    return EVAL.IDLE
  return SAME_STATE


==  LIST  ==

state_t list_next()
  list.next()
  mode == LIST_*:
    return LIST_*.LOOP
  else:
    return initial(mode)

state_t list_press(i, j)
  key(i, j) == K_RS:
    mode = EVAL
    return EVAL.IDLE
  return SAME_STATE


==  Miscellaneous  ==

state_t SAME_STATE()  =  return SAME_STATE

state_t NA()          =  assert false

state_t initial(mode):
  case mode:
    EVAL:
      blink = is_error && !is_key_pressed && !no_blink_flag
      return blink ? EVAL.BLINK_OFF : EVAL.IDLE
    LRN: return LRN.IDLE
    RUN: return RUN_READY
    ADV: return ADV.LOOP
    LIST_*: return LIST_*.LOOP
    PROGRAM_LOAD: return PROGRAM_LOAD
    PROGRAM_SAVE: return PROGRAM_SAVE

