state_t
- name
- display
- wait
- state_t (*next_handler)()
- state_t (*press_handler)(i, j)
- state_t (*release_handler)()

Modes:
- EVAL LRN RUN
- LIST_STEPS LIST_REGS LIST_LBLS
- PROGRAM_SAVE PROGRAM_LOAD
- ADV

State names are 'mode.suffix'.

name           | display  wait   next             press           release
===============+===============================================================
EVAL.IDLE      | REG      IDLE   NA()             eval_press(.)   initial(EVAL)
EVAL.FEEDBACK  | [REG     100    initial(EVAL)    eval_press(.)   SAME()
EVAL.BLINK_OFF | BLANK    400    EVAL.BLINK_ON    eval_press(.)   NA()
EVAL.BLINK_ON  | REG      400    EVAL.BLINK_OFF   eval_press(.)   NA()
---------------+---------------------------------------------------------------
LRN.IDLE       | STEP     IDLE   NA()             lrn_press(.)    SAME()
LRN.FEEDBACK   | [STEP    100    LRN.IDLE         lrn_press(.)    SAME()
---------------+---------------------------------------------------------------
RUN.READY      | [        100    RUN.LOOP         run_press(.)    SAME()
RUN.LOOP       | [        0      run_next()       run_press(.)    SAME()
RUN.PRINTED    | [        100*   RUN.LOOP         run_press(.)    SAME()
RUN.PAUSED     | REG      600    RUN.READY        run_press(.)    SAME()
RUN.TRACED     | REG      200    RUN.READY        run_press(.)    SAME()
---------------+---------------------------------------------------------------
PROGRAM_LOAD   | [        IDLE   NA()             stop_press(.)   SAME()
PROGRAM_SAVE   | [        IDLE   NA()             stop_press(.)   SAME()
---------------+---------------------------------------------------------------
ADV.LOOP       | [        200    adv_next()       NA()            adv_release()
---------------+---------------------------------------------------------------
LIST_*.READY   | [        100    LIST_*.LOOP      stop_press(.)    SAME()
LIST_*.LOOP    | [        0      list_next()      stop_press(.)   SAME()

Runtime
  state_t state

Key handlers:
  eval.press(i, j)
  lrn.press(i, j)
Next handlers
  run.next()
  adv.next()
  list_pgm.next()
  list_regs.next()
  list_lbls.next()


==  Engine  ==

wait_t press_key(i, j)
  assert 1 <= i <= 9 && 1 <= j <= 5
  is_key_pressed:
    release_key()
    return press_key(i, j)
  is_key_pressed = true
  new_state = state_data[current_state].press_handler(i, j)
  new_state == SAME: return SAME
  current_state = new_state
  set_display(state_data[current_state].display)
  return state_data[current_state].wait
  
wait_t release_key()
  !is_key_pressed: return SAME
  is_key_pressed = false
  trace_on: trace_on = false
  new_state = state_data[current_state].release_handler()
  new_state == SAME: return SAME
  current_state = new_state
  set_display(state_data[current_state].display)
  return state_data[current_state].wait
  
wait_t next()
  new_state = state_data[current_state].next_handler()
  new_state == SAME: return SAME
  current_state = new_state
  set_display(state_data[current_state].display)
  return state_data[current_state].wait


==  EVAL  ==

state_t eval_press(i, j)
  eval.press(i, j)
  mode == EVAL:
    feeback:  return EVAL_FEEDBACK
    else:     return EVAL.IDLE
  else:
    return initial(mode)


==  LRN  ==

state_t lrn_press(i, j)
  lrn.press(i, j)
  mode == LRN:
    feeback:  return LRN_FEEDBACK
    else:     return LRN.IDLE
  else:
    return initial(mode)


==  RUN  ==

state_t run_next()
  run.next()
  mode == RUN:
    is_paused:    return RUN.PAUSED
    trace_on:     return RUN.TRACED
    has_printed:  return RUN.PRINTED
    return RUN_LOOP
  else:
    return initial(mode)

state_t run_press(i, j)
  key(i, j) == K_RS:
    mode = EVAL
    return EVAL.IDLE
  key(i, j) == GTO:
    trace_on = true
  return SAME


==  ADV  ==

state_t adv_next()
  adv.next()
  return ADV.LOOP

state_t adv_release()
  mode = EVAL
  return initial(EVAL)


==  LIST  ==

state_t list_next()
  list.next()
  mode == LIST_*:
    return LIST_*.LOOP
  else:
    return initial(mode)


==  Miscellaneous  ==

state_t SAME()  =  return SAME

state_t NA()    =  assert false

state_t stop_press(i, j)
  key(i, j) == R/S:
    mode = EVAL
    return EVAL.IDLE
  return SAME

state_t initial(mode):
  case mode:
    EVAL: return (is_error && !is_key_pressed) ? EVAL_BLINK_OFF : EVAL.IDLE
    LRN: return LRN.IDLE
    RUN: return RUN_READY
    ADV: return ADV.LOOP
    LIST_*: return LIST_*.LOOP
    PROGRAM_LOAD: return PROGRAM_LOAD
    PROGRAM_SAVE: return PROGRAM_SAVE

