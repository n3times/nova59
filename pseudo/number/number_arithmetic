/*
 *  HELPERS.
 */

// Takes care of the case where x and y are very close by ensuring
// we don't go beyond 13-digit precision.
//   1.000000000000
// - 0.9999999999999
// -----------------
//   0.000000000001
N careful_substraction(X, Y)
  assert X >= Y > 0
  while Y.exp < X.exp:
    // Note that we purposefully lose precision.
    Y.mant /= 10;
    Y.exp++;
  R.mant = X.mant - Y.mant
  R.exp = X.exp
  if R.mant != 0:
    while R.mant < 10^12:
      R.mant *= 10;
      R.exp--
  return R


/*
 *  IMPLEMENTATION.
 */

N n_plus(X, Y, e)
  x = n2d(X)
  y = n2d(Y)
  x * y >= 0: return d2n(x + y, e)
  // Write x + y as s * (x' - y') where s = +/- 1 and x' >= y' > 0.
  s = sign(x + y)
  x, y = max(|x|, |y|), min(|x|, |y|)
  y / x < 0.9: return d2n(s * (x - y), e)
  e = false
  return careful_substraction(X, Y)

N n_minus(X, Y, e) =  return n_plus(X, n_chs(Y), e)

N n_times(X, Y, e) =  return d2n(n2d(X) * n2d(Y), e)

N n_div(X, Y, e)
  x = n2d(X)
  y = n2d(Y)
  y != 0: return d2n(x/y, e)
  e = true
  x == 0: return N_1
  return x > 0 ? N_INF : n_chs(N_INF)
