==  To string  == 

// Operand, possibly incomplete.
// LBL: LBL or _
// D:   D or _
// DD:  DD or D_ or _
// DDD: DDD or DD_ or D_ or _
// IND: *DD or *D_ or *_ 
// UNK: _
String operand_as_string(Operand opd)
  type = opd.type
  value = opd.value
  str = ""
  case type:
    LBL: USR:
      value.len > 0:
        key = int(value)
        str = key_data[key].as_string
    D: DD: DDD:
      assert value.len > 0
      str = value
    IND:
      str = "*" + value
    UNK:
      // Nothing
  type == DD && str.len < 2: str += "_"
  type == DDD && str.len < 3: str += "_"
  type == IND && str.len < 3: str += "_"
  str.len == 0: str += "_"

// Operation, complete, pending or canceled.
// INV _
// SUM _
// INV SUM _
// INV SUM 1_
// INV SUM 12
// INV _ [X]
// SUM _ [X]
// INV SUM _ [X]
// INV SUM 1_ [X]
String operation_as_string(Operation opn)
  str = ""

  // Operator.
  opr = opn.operator
  opr.inv: str += "INV"
  key = opr.key
  key != KEY_UNK:
    str.len > 0: str += " "
    str += key_data[key].as_string

  // Operands.
  opr.operands.len > 0: str += " " + operand_as_string(opn.operands[0])
  opr.operands.len > 1: str += " " + operand_as_string(opn.operands[1])

  opn.state != COMPLETE && str.last != "_": str += " _"
  opn.state == CANCELED: str += " [X]"

  return str
