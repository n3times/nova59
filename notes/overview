==  Main objects  ==

Key
  One of 100 keys (00 to 99).

Mode
  LRN, EVAL, RUN, SST, ADV, LIST, ...

KeyData 
  Info associated to a key such as its name and, for keys that act as operators,
  its kind of operands and its evaluator. 

Operation
  A syntactic representation of an operation, with its operator and operands.
  Produced by the Parser and consume by the associated Evaluator.

Runtime
  Intermediary between the client and the different mode handlers.
  Also, in charge of the display and of threading.

Mode Handlers
  One for each mode: RUN, EVAL, LRN, LST_* etc.
  They handle, for a given mode,  key presses, next(), and other client calls.

Parser
  Used by RUN, EVAL and LRN handlers to transform key presses and program steps
  into structured operations. These operations can later be evaluated.

Evaluators
  One for each operation (lnx, sto, gto, ...). They transform the calculator
  state. Used in RUN and EVAL modes.

Logger
  Logs operations and their results.

ProgramLister
  Lists program


==  Dependencies  ==

Operation
  Key

KeyData
  Key
  Mode

Parser
  Operation
  KeyData

ProgramLister
  Parser

LrnHandler
  Parser

EvaluatorHandler
  Parser
  KeyData
  State

Runtime
  Mode Handlers
  State
    Mode
    DisplayMode
    Config Flags

Evaluators
  Operation
  State


==  Example of flow: lnx  ==

User presses lnx. Client calls Runtime:
    runtime.press(2, 3)
        eval_handler.press(2, 3)        // Assuming we are in EVAL mode.
            parser.press(2, 3)          // Get structured opn from key press.
            eval_opns()                 // lnx is the operation.
                lnx.eval()              // Let evaluator compute lnx of regX.
                logger.log_operation()  // Logging.
        display_mode = [  // Runtime controls display mode.
        return 0.1        // Threading: have client call next() in 0.1s.

Client calls next in 0.1s:
    runtime.next()
        display_mode = regX  // Replace "[" by result of lnx.
        return IDLE          // Assuming there is no error.
