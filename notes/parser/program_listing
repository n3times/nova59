To list a program:
- handle each step through the parser
- for each handled step, consider key and context


== BASIC PROGRAM LISTING ==

void basic_program_listing(int steps[])
  Parser parser = new parser()

  for i = 0; i < steps.length; i++:
    keyHandled = parser.handle(MODE_RUN, step)
    step = steps[i]
    context = keyHandled.context
    context in { DBL_OPD_DD, DBL_OPD_DDD, KEY_OPD_D, KEY_OPD_DDD }:
      print "%03d %02d\n", i, step
    else:
      print "%03d %s\n", i, key_data[step].as_string


== COMPLEX PROGRAM LISTING ==

void nl_key(i, key) = print "\n%03d %s\n", i, key_data[key].as_string
void sp_key(i, key) = print " %s\n", key_data[key].as_string
void sp_dbl(i, key) = print " %02d\n", key
void dbl(key)       = print "%02d\n", key

void complex_program_listing(int steps[])
  Parser parser = new parser()

  for i = 0; i < steps.length; i++:
    KeyHandled keyHandled = parser.handle(MODE_RUN, step)
    step = steps[i]
    key = keyHandled.key
    context = keyHandled.context
    context:
      KEY_MOD_SEC: assert(false)
      KEY_MOD_NOSEC: assert(false)
      KEY_OPD_NOIND: assert(false)
      KEY_OPD_DD: assert(false)
      KEY_EVL_SST: assert(false)

      KEY_OPR_INV: nl_key(i, key) 
      KEY_OPR_NOINV: nl_key(i, key) 
      KEY_OPR_KEY:
        previous_context == KEY_OPR_INV:
          sp_key(key)
        else:
          nl_key(i, key)

      KEY_OPD_IND: sp_key(key)
      KEY_OPD_D: sp_key(key)
      KEY_OPD_DDD: sp_key(key)
      DBL_OPD_DD: sp_dbl(key)
      DBL_OPD_DDD: dbl(key)
      KEY_OPD_LBL: sp_key(key)

      KEY_SKIP: nl_key(i, key)
      KEY_LBL_BEG: nl_key(i, key)
      KEY_LBL_END: sp_key(key)
      KEY_PGM_SBR: sp_key(key)
