OperationLog operationLog          // Unlimited list of complete operations.
CurrentOperation currentOperation  // Current operation.

Parser parser = new_parser()


== EVAL/SST/RUN modes

int last_evaled_index = -1

// EVAL
void on_key_pressed(int i, int j):
  parser.handle_key_pressed(MODE_EVAL, i, j)
  eval_ops()

// SST / RUN
void on_handle_step(Mode mode, int step):
  parser.handle(mode, step)
  eval_ops()

void eval_ops()
  for i = last_evaled_index + 1; i <= parser.operations.last_index; i++:
    opn = parser.operations[i]
    opr = opn.operator
    do_eval_display = 
      state.is_display_edit &&
      opr != KEY_UNK &&
      opr.does_eval_display
    do_eval_display: 
      state.display.eval()
    opn.parse_state == COMPLETE:
      opn.eval()
      operationLog.add(opn)
  last_evaled_index = parser.operations.last_index - 1
  currentOperation.set(parser.operations.last)


== PROGRAM LISTING

void basic_program_listing(int steps[])
  Parser parser = new parser()

  for i = 0; i < steps.length; i++:
    keyHandled = parser.handle(MODE_RUN, step)
    step = steps[i]
    context = keyHandled.context
    context in { DBL_OPD_DD, DBL_OPD_DDD, KEY_OPD_D, KEY_OPD_DDD }
      print "%03d %02d\n", i, step
    else:
      print "%03d %s\n", i, key_data[step].as_string

void complex_program_listing
  Parser parser = new parser()

  for i = 0; i < steps.length; i++:
    KeyHandled keyHandled = parser.handle(MODE_RUN, step)
    int step = steps[i]
    keyContext.context:
      KEY_MOD_SEC: assert(false)
      KEY_MOD_NOSEC: assert(false)
      KEY_OPR_INV: nl_key() 
      KEY_OPR_NOINV: nl_key() 
      KEY_OPR_KEY:
        previous_context == KEY_OPR_INV:
          sp_key()
        else:
          nl_key()
      KEY_OPD_IND: sp_key()
      KEY_OPD_NOIND: assert(false)
      KEY_OPD_D: sp_key()
      KEY_OPD_DD: assert(false)
      KEY_OPD_DDD: sp_key()
      DBL_OPD_DD: sp_dbl()
      DBL_OPD_DDD: dbl()
      KEY_OPD_LBL: sp_key()
      KEY_SKIP: nl_key()
      KEY_LBL_BEG: nl_key()
      KEY_LBL_END: sp_key()
      KEY_EVL_SST: assert(false)
      KEY_PGM_SBR: sp_key()
