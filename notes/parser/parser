Parser


== API ==

// Given a stream of keys and program steps, the parser generates a stream of
// structured operations.
Parser
  Operation operations[]   // An ever growing array. Last/current may be empty.

  bool sec  // 2nd key is pressed.

  // Updates the parser after a key from the keyboard has been pressed.
  // Params: mode is MODE_EVAL or MODE_LRN, row in 1..9, col in 1..5.
  // Returns the key that has been handled and its context.
  KeyHandled handle_key_pressed(Mode mode, int row, int col)

  // Updates the parser after 'val' has been handled.
  // In MODE_EVAL and MODE_LRN, 'val' is a key.
  // In MODE_RUN and MODE_SST, 'val' is a step.
  // Param: val in 0..99.
  // Returns the key/val that has been handled and its context.
  KeyHandled handle(Mode mode, int val)

Mode - enum
  MODE_LRN MODE_EVAL MODE_RUN MODE_SST

Key - enum
  K_0 K_1 ... K_9
  K_EE K_A K_B ...
  ...

KeyContext - enum
  KEY_MOD_SEC  // 2nd key
  KEY_OPR_INV  // Operator inv has been modified
  KEY_OPR_KEY  // Operator key has been set
  KEY_OPD_IND  // Operand ind has been modified
  KEY_OPD_DIG  // Digit used as part of the operand
  KEY_OPD_DI2  // 2 digits used as part of the operand
  KEY_OPD_LBL  // A label used as operand
  KEY_SKIP     // Key does not affect operation
  KEY_LBL_BEG  // Beginning of label ("Lbl" in "Lbl STO")
  KEY_LBL_END  // End of label ("STO" in "Lbl STO")
  KEY_EVL_SST  // SST key in EVAL mode

KeyHandled
  KeyContext context
  int key

Operation
  ParseState parse_state
  Operator operator
  Operand operands[]      // A growing array of length 0, 1 or 2

ParseState - enum
  PRE_OPR LBL_END                         // Operator
  OPD_UNK OPD_IND LAST_DD LAST_D ADDRESS  // Operand
  COMPLETE

Operator
  bool inv
  Key key

Operand
  OperandType type  // Indicates how to interpret the operand value
  int value         // 0 to 999: opcode for label or address or register...

OperandType - enum
  UNK IND LBL NUM

OperandKind - enum
  OPD_KIND_ADDRESS  // DDD, *DD or LBL
  OPD_KIND_D        // D or *DD
  OPD_KIND_DD       // DD or *DD
  OPD_KIND_DD_ONLY  // DD
  OPD_KIND_SBR      // <usr> or SBR <address>

OperatorKind - enum
  OPR_KIND_NO_PARAM
  OPR_KIND_D
  OPR_KIND_DD
  OPR_KIND_DD_ONLY
  OPR_KIND_ADDRESS
  OPR_KIND_D_ADDRESS
  OPR_KIND_NONE       // Not an operator.


== Data ==

Key get_key(int row, int col)
Key get_sec(int val)

// All keys are operators except 2nd INV Ind 2n' IN' NOP Lbl.
// SST is an operator in LRN mode but not in RUN, SST and EVAL modes.
// All keys are labels except 0..9, 2nd, 2n', Ind, LRN, SST, BST, Del, Ins.
KeyData
  Key key
  bool is_label
  bool is_operator(Mode mode, bool inv)
  OperatorKind(*opr_kind)(Mode mode, bool inv)  // Special: Pgm SBR Fix
  char *as_string                               // For debugging

KeyData keyData[100]  // indexed by key


== Helper functions ==

int operand_count(bool inv, Key key, Mode mode):
  kind = operator_kind(inv, key, mode)
  case kind:
    OPR_KIND_NO_PARAM:  return 0
    OPR_KIND_D_ADDRESS: return 2
    default:            return 1

OperandKind operand_kind(Mode mode, bool inv, Key key, int opd_index)
   opr_kind = operator_kind(inv, key, mode)
   case opr_kind:
     OPR_KIND_NO_PARAM: assert(false)
     OPR_KIND_D: assert(opd_index == 0); return D
     OPR_KIND_DD: assert(opd_index == 0); return DD
     OPR_KIND_ADDRESS: assert(opd_index == 0); return ADDRESS
     OPR_KIND_D_ADDRESS:
       opd_index:
         0: return D
         1: return ADDRESS
         2: assert(false)

bool is_dig(Key key) = key in 0..9
bool is_usr(Key key) = key in 10..19 // A-E and A'-E'
bool is(int val1, int val2) = val1 == val2

cancel_opn()
  opn = operations.last
  opr = opn.operator
  !opr.inv && opr.key == KEY_UNKNOWN: return
  
  add new operation  // Previous operation remains incomplete
    parse_state = PRE_OPR
    operator = (false, -1)
    operands = []

done_opr()
  Same as done_opd()

done_opd()
  if current operation has additional operands
    add new operand (UNK, -1)
    current_operation.parse_state = OPD_UNK
  else
    current_operation.parse_state = COMPLETE
    add empty operation
      parse_state = PRE_OPR
      operator = (false, -1)
      operands = []


== Implementation ==

KeyHandled handle_key_pressed(Mode mode, int row, int col)
  assert mode == MODE_EVAL || mode == MODE_LRN
  assert row in 1..9 && col in 1..5
  return handleKey(mode, get_key(row, col))

KeyHandled handle(Mode mode, int val)
  assert val in 0..99

  // Some definitions
  opn = operations.last
  opr = opn.operator
  opd = opn.operands.last
  mode_step = mode == MODE_RUN || mode == MODE_SST
  mode_key = mode == MODE_EVAL || mode == MODE_LRN

  // Handle 2nd modifier.
  mode_key:
    is(val, 2nd): ~opn.sec                                          KEY_MOD_SEC
    is(val, 2n'):                                                   KEY_SKIP
    opn.sec:
      val = get_sec(val)
      opn.sec = false
    parse_state == PRE_OPR && val == IN':
      val = INV
      opn.sec = true

  // Cancel operation if we exit LRN mode by going beyond the last program step.
  mode == MODE_EVAL && self.mode == MODE_LRN: cancel_opn()

  self.mode = mode

  is(val, SST) && mode == MODE_EVAL:                                KEY_EVL_SST

  case opn.parse_state:
    COMPLETE: assert(false)

    // Condition                  opr inv|key         new state     ret_value
    PRE_OPR:
      is(val, INV)||is(val, IN'): ~opr.inv|.          PRE_OPR       KEY_OPR_INV
      is_opr(val, mode, opr.inv): .|val               done_opr()    KEY_OPR_KEY
      is(val, Lbl) && mode != EVAL:                   LBL_END       KEY_LBL_BEG
      else:  /* Skip 2nd, 2nd', Nop, Ind, maybe Lbl, SST */         KEY_SKIP
    LBL_END:                                          PRE_OPR       KEY_LBL_END

    // Condition                  opd type|value      state         ret_value
    OPD_UNK:
      case operand_kind(.):
        OPD_KIND_ADDRESS:         .|.                 ADDRESS       handle(.)
        OPD_KIND_DD:
          is(val, Ind):           IND|.               OPD_IND       KEY_OPD_IND
          // fall through:
        OPD_KIND_DD_ONLY:
          mode_step:              NUM|val             done_opd()    KEY_OPD_DI2
          is_dig(val):            NUM|val             LAST_D        KEY_OPD_DIG
          else:                                       cancel_opn()  handle(.)
        OPD_KIND_D:
          is(val, Ind):           IND|.               OPD_IND       KEY_OPD_IND
          mode_step:              NUM|val%10          done_opd()    KEY_OPD_DIG
          is_dig(val):            NUM|val             done_opd()    KEY_OPD_DIG
          else:                                       cancel_opn()  handle(.)
        OPD_KIND_SBR:
          is_usr(val):            LBL|val             done_opd()    KEY_OPD_LBL
          is(val, SBR):           .|.                 ADDRESS       KEY_PGM_SBR
          is(val, 2nd) || is(val, SST):                             KEY_SKIP
          else:                                       cancel_opn()  handle(.)
    OPD_IND:
      mode_step:                  .|val               done_opd()    KEY_OPD_DI2
      is(val, Ind):               UNK|.               OPD_UNK       KEY_OPD_IND
      is_dig(val):                .|val               LAST_D        KEY_OPD_DIG
      else:                                           cancel_opn()  handle(.)
    ADDRESS:
      is(val, Ind):               IND|.               OPD_IND       KEY_OPD_IND
      is_dig(val):                NUM|val             LAST_DD       KEY_OPD_DIG
      is_lbl(val):                LBL|val             done_opd()    KEY_OPD_LBL
      is_opr(val, mode, opr.inv):                     cancel_opn()  handle(.)
      else:  /* 2nd, 2n', maybe SST */                              KEY_SKIP
    LAST_DD:
      mode_step:                  .|value*100 + val   done_opd()    KEY_OPD_DI2
      is_dig(val):                .|value*10 + val    LAST_D        KEY_OPD_DIG
      else:                                           done_opd()    handle(.)
    LAST_D:
      is_dig(val):                .|value*10 + val    done_opd()    KEY_OPD_DIG
      else:                                           done_opd()    handle(.)
    // In mode_step, LAST_D only appears as dangling from MODE_EVAL to MODE_SST.
    // In a real TI-59, it is treated as a digit completing the operand,
    // followed by another digit.
