Parser


== API ==

// Given a stream of keys and program steps, the parser generates a stream of
// structured operations.
Parser
  Operation operations[]   // An ever growing array. Last/current may be empty.

  bool sec  // 2nd key is pressed.

  // Updates the parser after a physical key, from the keyboard, has been
  // pressed (EVAL/LRN modes).
  // Params: row in 1..9, col in 1..5.
  // Returns the key that has been handled and its context.
  KeyHandled handleKeyPressed(Mode mode, int row, int col)

  // Updates the parser after val has been handled.
  // In MODE_EVAL and MODE_LRN, val is a key.
  // In MODE_RUN and MODE_SST, val is a step.
  // Param: val in 0..99.
  // Returns the key that has been handled and its context.
  KeyHandled handle(Mode mode, int val)

Mode - enum
  MODE_LRN MODE_EVAL MODE_RUN

Key - enum
  K_0 K_1 ... K_9
  K_EE K_A K_B ...
  ...

KeyHandled
  KeyContext context
  Key key

KeyContext - enum
  KEY_MOD_SEC  // 2nd has been selected
  KEY_MOD_SE2  // 2nd has been unselected
  KEY_OPR_INV  // INV
  KEY_OPR_COD  // Operator code
  KEY_OPD_IND  // Ind modifier key
  KEY_OPD_DIG  // Digit used as part of the operand
  KEY_OPD_DI2  // 2 digits used as part of the operand
  KEY_OPD_LBL  // A label used as operand
  KEY_SKIP     // Can be IND, NOP
  KEY_LBL_BEG  // Beginning of label ("Lbl" in "Lbl STO")
  KEY_LBL_END  // End of label ("STO" in "Lbl STO")
  KEY_EVL_SST  // SST has been pressed in EVAL mode

Operation
  ParseState parse_state
  Operator operator
  Operand operands[]      // A growing array of length 0, 1 or 2

ParseState - enum
  PRE_OPR LBL_END                         // Operator
  OPD_UNK OPD_IND LAST_DD LAST_D ADDRESS  // Operand
  COMPLETE

Operator
  bool inv
  Key key

Operand
  OperandType type  // Indicates how to interpret the operand value
  int value         // 0 to 999: opcode for label or address or register...

OperandType - enum
  UNK IND LBL NUM

OperandKind - enum
  OPD_KIND_ADDRESS  // DDD, *DD or LBL
  OPD_KIND_D        // D or *DD
  OPD_KIND_DD       // DD or *DD
  OPD_KIND_DD_ONLY  // DD
  OPD_KIND_SBR      // <usr> or SBR <address>

OperatorKind - enum
  OPR_KIND_NO_PARAM
  OPR_KIND_D
  OPR_KIND_DD
  OPR_KIND_DD_ONLY
  OPR_KIND_ADDRESS
  OPR_KIND_D_ADDRESS
  OPR_KIND_NONE


== Data ==

Key get_key(bool sec, int row, int col)

// All keys are operators except 2nd INV Ind 2n' IN' NOP Lbl.
// SST is an operator in LRN mode but not in RUN and EVAL modes.
// All keys are labels except 0..9, 2nd, 2n', Ind, LRN, SST, BST, Del, Ins.
KeyData
  Key key
  bool isLabel
  bool isOperator(Mode mode, bool inv)
  OperatorKind(*opr_kind)(Mode mode, bool inv)  // Special: Pgm SBR Fix
  char *asString                                // For debugging

KeyData keyData[100]  // indexed by key


== Helper functions ==

int operand_count(bool inv, Key key, Mode mode):
  kind = operator_kind(inv, key, mode)
  case kind:
    OPR_KIND_NO_PARAM:  return 0
    OPR_KIND_D_ADDRESS: return 2
    default:            return 1

OperandKind operand_kind(Mode mode, bool inv, Key key, int opd_index)
   opr_kind = operator_kind(inv, key, mode)
   case opr_kind:
     OPR_KIND_NO_PARAM: assert(false)
     OPR_KIND_D: assert(opd_index == 0); return D
     OPR_KIND_DD: assert(opd_index == 0); return DD
     OPR_KIND_ADDRESS: assert(opd_index == 0); return ADDRESS
     OPR_KIND_D_ADDRESS:
       opd_index:
         0: return D
         1: return ADDRESS
         2: assert(false)

bool is_dig(bool sec, int row, int col) = get_key(.) in 0..9
bool is_usr(Key key) = key in 10..19 // A-E and A'-E'

canc_opn()
  add new operation  // Previous operation remains incomplete
    parse_state = PRE_OPR
    operator = (false, -1)
    operands = []

done_opr()
  Same as done_opd()

done_opd()
  if current operation has additional operands
    add new operand (UNK, -1)
    current_operation.parse_state = OPD_UNK
  else
    current_operation.parse_state = COMPLETE
    add empty operation
      parse_state = PRE_OPR
      operator = (false, -1)
      operands = []


== Implementation ==

KeyHandled handleKeyPressed(Mode mode, int row, int col)
  assert mode == MODE_KEY
  assert row in 1..9 && col in 1..5
  return handleKey(mode, get_key(false, row, col))

KeyHandled handle(Mode mode, int val)
  assert val in 0..99

  // Handle 2nd modifier.
  mode == MODE_KEY:
    is(2nd): ~sec                                                   KEY_MOD_SEC
    is(2n'):                                                        KEY_SKIP
    key = get_key(sec, key)
    sec = false
    parse_state == PRE_OPR && key == IN':
      key = INV
      sec = true

  mode == MODE_EVAL && self.mode == MODE_LRN: cancelOperationIfPending()
  self.mode = mode

  // Some definitions
  opn = operations.last
  opr = opn.operator

  is(SST) && mode == MODE_EVAL:                                     KEY_EVL_SST

  case opn.parse_state:
    COMPLETE: assert(false)

    // Condition                  opr inv|key         new state     ret_value
    PRE_OPR:
      is(INV) || is(INV2):        ~opr.inv|.          .             KEY_OPR_INV
      is_opr(.):                  .|val               done_opr()    KEY_OPR_COD
      is(LBL) && mode != EVAL:                        LBL_END       KEY_LBL_BEG
      else:  /* Skip 2nd, 2nd', Nop, Ind, maybe Lbl, SST */         KEY_SKIP
    LBL_END:                                          PRE_OPR       KEY_LBL_END

    // Condition                  opd type|value      state         ret_value
    OPD_UNK:
      case operand_kind(.):
        OPD_KIND_ADDRESS:         .|.                 ADDRESS       handle(.)
        OPD_KIND_DD:
          is(Ind):                IND|.               OPD_IND       KEY_OPD_IND
          // fall through
        OPD_KIND_DD_ONLY:
          MODE_STEP:              NUM|val             done_opd()    KEY_OPD_DI2
          is_dig(.):              NUM|val             LAST_D        KEY_OPD_DIG
          else:                                       canc_opn()    handle(.)
        OPD_KIND_D:
          is(Ind):                IND|.               OPD_IND       KEY_OPD_IND
          MODE_STEP:              NUM|val%10          done_opd()    KEY_OPD_DIG
          is_dig(.):              NUM|val             done_opd()    KEY_OPD_DIG
          else:                                       canc_opn()    handle(.)
        OPD_KIND_SBR:
          is_usr(.):              LBL|val             done_opd()    KEY_OPD_LBL
          is(SBR):                .|.                 ADDRESS       KEY_PGM_SBR
          is(2nd) || is(SST):                                       KEY_SKIP
          else:                                       canc_opn()    handle(.)
    OPD_IND:
      MODE_STEP:                  .|val               done_opd()    KEY_OPD_DI2
      is(Ind):                    UNK|.               OPD_UNK       KEY_OPD_IND
      is_dig(.):                  .|key               LAST_D        KEY_OPD_DIG
      else:                                           canc_opn()    handle(.)
    ADDRESS:
      is(Ind):                    IND|.               OPD_IND       KEY_OPD_IND
      is_dig(.):                  NUM|val             LAST_DD       KEY_OPD_DIG
      is_lbl(.):                  LBL|val             done_opd()    KEY_OPD_LBL
      is_opr(.):                                      canc_opn()    handle(.)
      else:  /* 2nd, 2n', maybe SST */                              KEY_SKIP
    LAST_DD:
      MODE_STEP:                  .|value*100 + val   done_opd()     KEY_OPD_DI2
      is_dig(.):                  .|value*10 + val    LAST_D         KEY_OPD_DIG
      else:                                           done_opd()     handle(.)
    LAST_D:
      is_dig(.):                  .|value*10 + val    done_opd()     KEY_OPD_DIG
      else:                                           done_opd()     handle(.)
    // In MODE_STEP, LAST_D only appears as dangling from MODE_EVAL to MODE_SST.
    // In a real TI-59, it is treated as a digit completing the operand,
    // followed by another digit.
